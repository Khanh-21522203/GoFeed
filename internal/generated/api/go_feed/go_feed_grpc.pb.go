// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.3
// source: api/go_feed/go_feed.proto

package go_feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoFeedService_CreateAccount_FullMethodName              = "/go_feed.GoFeedService/CreateAccount"
	GoFeedService_CreateSession_FullMethodName              = "/go_feed.GoFeedService/CreateSession"
	GoFeedService_CreatePost_FullMethodName                 = "/go_feed.GoFeedService/CreatePost"
	GoFeedService_GetPostByID_FullMethodName                = "/go_feed.GoFeedService/GetPostByID"
	GoFeedService_GetPostOfAccount_FullMethodName           = "/go_feed.GoFeedService/GetPostOfAccount"
	GoFeedService_UpdatePost_FullMethodName                 = "/go_feed.GoFeedService/UpdatePost"
	GoFeedService_CreateLike_FullMethodName                 = "/go_feed.GoFeedService/CreateLike"
	GoFeedService_GetLikeCountOfPost_FullMethodName         = "/go_feed.GoFeedService/GetLikeCountOfPost"
	GoFeedService_GetLikeAccountsOfPost_FullMethodName      = "/go_feed.GoFeedService/GetLikeAccountsOfPost"
	GoFeedService_DeleteLike_FullMethodName                 = "/go_feed.GoFeedService/DeleteLike"
	GoFeedService_CreateComment_FullMethodName              = "/go_feed.GoFeedService/CreateComment"
	GoFeedService_GetCommentCountOfPost_FullMethodName      = "/go_feed.GoFeedService/GetCommentCountOfPost"
	GoFeedService_GetCommentsOfPost_FullMethodName          = "/go_feed.GoFeedService/GetCommentsOfPost"
	GoFeedService_UpdateComment_FullMethodName              = "/go_feed.GoFeedService/UpdateComment"
	GoFeedService_DeleteComment_FullMethodName              = "/go_feed.GoFeedService/DeleteComment"
	GoFeedService_CreateFollow_FullMethodName               = "/go_feed.GoFeedService/CreateFollow"
	GoFeedService_GetFollowerCountOfAccount_FullMethodName  = "/go_feed.GoFeedService/GetFollowerCountOfAccount"
	GoFeedService_GetFollowersOfAccount_FullMethodName      = "/go_feed.GoFeedService/GetFollowersOfAccount"
	GoFeedService_GetFollowingCountOfAccount_FullMethodName = "/go_feed.GoFeedService/GetFollowingCountOfAccount"
	GoFeedService_GetFollowingsOfAccount_FullMethodName     = "/go_feed.GoFeedService/GetFollowingsOfAccount"
	GoFeedService_DeleteFollow_FullMethodName               = "/go_feed.GoFeedService/DeleteFollow"
	GoFeedService_GetNewFeeds_FullMethodName                = "/go_feed.GoFeedService/GetNewFeeds"
)

// GoFeedServiceClient is the client API for GoFeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoFeedServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*GetPostByIDResponse, error)
	GetPostOfAccount(ctx context.Context, in *GetPostOfAccountRequest, opts ...grpc.CallOption) (*GetPostOfAccountResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeResponse, error)
	GetLikeCountOfPost(ctx context.Context, in *GetLikeCountOfPostRequest, opts ...grpc.CallOption) (*GetLikeCountOfPostResponse, error)
	GetLikeAccountsOfPost(ctx context.Context, in *GetLikeAccountsOfPostRequest, opts ...grpc.CallOption) (*GetLikeAccountsOfPostResponse, error)
	DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*DeleteLikeResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	GetCommentCountOfPost(ctx context.Context, in *GetCommentCountOfPostRequest, opts ...grpc.CallOption) (*GetCommentCountOfPostResponse, error)
	GetCommentsOfPost(ctx context.Context, in *GetCommentsOfPostRequest, opts ...grpc.CallOption) (*GetCommentsOfPostResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	CreateFollow(ctx context.Context, in *CreateFollowRequest, opts ...grpc.CallOption) (*CreateFollowResponse, error)
	GetFollowerCountOfAccount(ctx context.Context, in *GetFollowerCountOfAccountRequest, opts ...grpc.CallOption) (*GetFollowerCountOfAccountResponse, error)
	GetFollowersOfAccount(ctx context.Context, in *GetFollowersOfAccountRequest, opts ...grpc.CallOption) (*GetFollowersOfAccountResponse, error)
	GetFollowingCountOfAccount(ctx context.Context, in *GetFollowingCountOfAccountRequest, opts ...grpc.CallOption) (*GetFollowingCountOfAccountResponse, error)
	GetFollowingsOfAccount(ctx context.Context, in *GetFollowingsOfAccountRequest, opts ...grpc.CallOption) (*GetFollowingsOfAccountResponse, error)
	DeleteFollow(ctx context.Context, in *DeleteFollowRequest, opts ...grpc.CallOption) (*DeleteFollowResponse, error)
	GetNewFeeds(ctx context.Context, in *GetNewFeedsRequest, opts ...grpc.CallOption) (*GetNewFeedsResponse, error)
}

type goFeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoFeedServiceClient(cc grpc.ClientConnInterface) GoFeedServiceClient {
	return &goFeedServiceClient{cc}
}

func (c *goFeedServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, GoFeedService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, GoFeedService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, GoFeedService_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*GetPostByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostByIDResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetPostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetPostOfAccount(ctx context.Context, in *GetPostOfAccountRequest, opts ...grpc.CallOption) (*GetPostOfAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostOfAccountResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetPostOfAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, GoFeedService_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLikeResponse)
	err := c.cc.Invoke(ctx, GoFeedService_CreateLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetLikeCountOfPost(ctx context.Context, in *GetLikeCountOfPostRequest, opts ...grpc.CallOption) (*GetLikeCountOfPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikeCountOfPostResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetLikeCountOfPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetLikeAccountsOfPost(ctx context.Context, in *GetLikeAccountsOfPostRequest, opts ...grpc.CallOption) (*GetLikeAccountsOfPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikeAccountsOfPostResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetLikeAccountsOfPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*DeleteLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLikeResponse)
	err := c.cc.Invoke(ctx, GoFeedService_DeleteLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, GoFeedService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetCommentCountOfPost(ctx context.Context, in *GetCommentCountOfPostRequest, opts ...grpc.CallOption) (*GetCommentCountOfPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentCountOfPostResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetCommentCountOfPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetCommentsOfPost(ctx context.Context, in *GetCommentsOfPostRequest, opts ...grpc.CallOption) (*GetCommentsOfPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsOfPostResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetCommentsOfPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, GoFeedService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, GoFeedService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) CreateFollow(ctx context.Context, in *CreateFollowRequest, opts ...grpc.CallOption) (*CreateFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFollowResponse)
	err := c.cc.Invoke(ctx, GoFeedService_CreateFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetFollowerCountOfAccount(ctx context.Context, in *GetFollowerCountOfAccountRequest, opts ...grpc.CallOption) (*GetFollowerCountOfAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowerCountOfAccountResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetFollowerCountOfAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetFollowersOfAccount(ctx context.Context, in *GetFollowersOfAccountRequest, opts ...grpc.CallOption) (*GetFollowersOfAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowersOfAccountResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetFollowersOfAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetFollowingCountOfAccount(ctx context.Context, in *GetFollowingCountOfAccountRequest, opts ...grpc.CallOption) (*GetFollowingCountOfAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowingCountOfAccountResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetFollowingCountOfAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetFollowingsOfAccount(ctx context.Context, in *GetFollowingsOfAccountRequest, opts ...grpc.CallOption) (*GetFollowingsOfAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowingsOfAccountResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetFollowingsOfAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) DeleteFollow(ctx context.Context, in *DeleteFollowRequest, opts ...grpc.CallOption) (*DeleteFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFollowResponse)
	err := c.cc.Invoke(ctx, GoFeedService_DeleteFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFeedServiceClient) GetNewFeeds(ctx context.Context, in *GetNewFeedsRequest, opts ...grpc.CallOption) (*GetNewFeedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNewFeedsResponse)
	err := c.cc.Invoke(ctx, GoFeedService_GetNewFeeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoFeedServiceServer is the server API for GoFeedService service.
// All implementations must embed UnimplementedGoFeedServiceServer
// for forward compatibility.
type GoFeedServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPostByID(context.Context, *GetPostByIDRequest) (*GetPostByIDResponse, error)
	GetPostOfAccount(context.Context, *GetPostOfAccountRequest) (*GetPostOfAccountResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeResponse, error)
	GetLikeCountOfPost(context.Context, *GetLikeCountOfPostRequest) (*GetLikeCountOfPostResponse, error)
	GetLikeAccountsOfPost(context.Context, *GetLikeAccountsOfPostRequest) (*GetLikeAccountsOfPostResponse, error)
	DeleteLike(context.Context, *DeleteLikeRequest) (*DeleteLikeResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	GetCommentCountOfPost(context.Context, *GetCommentCountOfPostRequest) (*GetCommentCountOfPostResponse, error)
	GetCommentsOfPost(context.Context, *GetCommentsOfPostRequest) (*GetCommentsOfPostResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	CreateFollow(context.Context, *CreateFollowRequest) (*CreateFollowResponse, error)
	GetFollowerCountOfAccount(context.Context, *GetFollowerCountOfAccountRequest) (*GetFollowerCountOfAccountResponse, error)
	GetFollowersOfAccount(context.Context, *GetFollowersOfAccountRequest) (*GetFollowersOfAccountResponse, error)
	GetFollowingCountOfAccount(context.Context, *GetFollowingCountOfAccountRequest) (*GetFollowingCountOfAccountResponse, error)
	GetFollowingsOfAccount(context.Context, *GetFollowingsOfAccountRequest) (*GetFollowingsOfAccountResponse, error)
	DeleteFollow(context.Context, *DeleteFollowRequest) (*DeleteFollowResponse, error)
	GetNewFeeds(context.Context, *GetNewFeedsRequest) (*GetNewFeedsResponse, error)
	mustEmbedUnimplementedGoFeedServiceServer()
}

// UnimplementedGoFeedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoFeedServiceServer struct{}

func (UnimplementedGoFeedServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedGoFeedServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedGoFeedServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedGoFeedServiceServer) GetPostByID(context.Context, *GetPostByIDRequest) (*GetPostByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (UnimplementedGoFeedServiceServer) GetPostOfAccount(context.Context, *GetPostOfAccountRequest) (*GetPostOfAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostOfAccount not implemented")
}
func (UnimplementedGoFeedServiceServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedGoFeedServiceServer) CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedGoFeedServiceServer) GetLikeCountOfPost(context.Context, *GetLikeCountOfPostRequest) (*GetLikeCountOfPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeCountOfPost not implemented")
}
func (UnimplementedGoFeedServiceServer) GetLikeAccountsOfPost(context.Context, *GetLikeAccountsOfPostRequest) (*GetLikeAccountsOfPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeAccountsOfPost not implemented")
}
func (UnimplementedGoFeedServiceServer) DeleteLike(context.Context, *DeleteLikeRequest) (*DeleteLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedGoFeedServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedGoFeedServiceServer) GetCommentCountOfPost(context.Context, *GetCommentCountOfPostRequest) (*GetCommentCountOfPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountOfPost not implemented")
}
func (UnimplementedGoFeedServiceServer) GetCommentsOfPost(context.Context, *GetCommentsOfPostRequest) (*GetCommentsOfPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsOfPost not implemented")
}
func (UnimplementedGoFeedServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedGoFeedServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedGoFeedServiceServer) CreateFollow(context.Context, *CreateFollowRequest) (*CreateFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (UnimplementedGoFeedServiceServer) GetFollowerCountOfAccount(context.Context, *GetFollowerCountOfAccountRequest) (*GetFollowerCountOfAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerCountOfAccount not implemented")
}
func (UnimplementedGoFeedServiceServer) GetFollowersOfAccount(context.Context, *GetFollowersOfAccountRequest) (*GetFollowersOfAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersOfAccount not implemented")
}
func (UnimplementedGoFeedServiceServer) GetFollowingCountOfAccount(context.Context, *GetFollowingCountOfAccountRequest) (*GetFollowingCountOfAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingCountOfAccount not implemented")
}
func (UnimplementedGoFeedServiceServer) GetFollowingsOfAccount(context.Context, *GetFollowingsOfAccountRequest) (*GetFollowingsOfAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingsOfAccount not implemented")
}
func (UnimplementedGoFeedServiceServer) DeleteFollow(context.Context, *DeleteFollowRequest) (*DeleteFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollow not implemented")
}
func (UnimplementedGoFeedServiceServer) GetNewFeeds(context.Context, *GetNewFeedsRequest) (*GetNewFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewFeeds not implemented")
}
func (UnimplementedGoFeedServiceServer) mustEmbedUnimplementedGoFeedServiceServer() {}
func (UnimplementedGoFeedServiceServer) testEmbeddedByValue()                       {}

// UnsafeGoFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoFeedServiceServer will
// result in compilation errors.
type UnsafeGoFeedServiceServer interface {
	mustEmbedUnimplementedGoFeedServiceServer()
}

func RegisterGoFeedServiceServer(s grpc.ServiceRegistrar, srv GoFeedServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoFeedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoFeedService_ServiceDesc, srv)
}

func _GoFeedService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetPostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetPostByID(ctx, req.(*GetPostByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetPostOfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostOfAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetPostOfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetPostOfAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetPostOfAccount(ctx, req.(*GetPostOfAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_CreateLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).CreateLike(ctx, req.(*CreateLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetLikeCountOfPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeCountOfPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetLikeCountOfPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetLikeCountOfPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetLikeCountOfPost(ctx, req.(*GetLikeCountOfPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetLikeAccountsOfPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeAccountsOfPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetLikeAccountsOfPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetLikeAccountsOfPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetLikeAccountsOfPost(ctx, req.(*GetLikeAccountsOfPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_DeleteLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).DeleteLike(ctx, req.(*DeleteLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetCommentCountOfPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentCountOfPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetCommentCountOfPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetCommentCountOfPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetCommentCountOfPost(ctx, req.(*GetCommentCountOfPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetCommentsOfPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsOfPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetCommentsOfPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetCommentsOfPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetCommentsOfPost(ctx, req.(*GetCommentsOfPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_CreateFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).CreateFollow(ctx, req.(*CreateFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetFollowerCountOfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerCountOfAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetFollowerCountOfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetFollowerCountOfAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetFollowerCountOfAccount(ctx, req.(*GetFollowerCountOfAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetFollowersOfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersOfAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetFollowersOfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetFollowersOfAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetFollowersOfAccount(ctx, req.(*GetFollowersOfAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetFollowingCountOfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingCountOfAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetFollowingCountOfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetFollowingCountOfAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetFollowingCountOfAccount(ctx, req.(*GetFollowingCountOfAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetFollowingsOfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingsOfAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetFollowingsOfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetFollowingsOfAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetFollowingsOfAccount(ctx, req.(*GetFollowingsOfAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_DeleteFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).DeleteFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_DeleteFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).DeleteFollow(ctx, req.(*DeleteFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFeedService_GetNewFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFeedServiceServer).GetNewFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoFeedService_GetNewFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFeedServiceServer).GetNewFeeds(ctx, req.(*GetNewFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoFeedService_ServiceDesc is the grpc.ServiceDesc for GoFeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoFeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_feed.GoFeedService",
	HandlerType: (*GoFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _GoFeedService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _GoFeedService_CreateSession_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _GoFeedService_CreatePost_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _GoFeedService_GetPostByID_Handler,
		},
		{
			MethodName: "GetPostOfAccount",
			Handler:    _GoFeedService_GetPostOfAccount_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _GoFeedService_UpdatePost_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _GoFeedService_CreateLike_Handler,
		},
		{
			MethodName: "GetLikeCountOfPost",
			Handler:    _GoFeedService_GetLikeCountOfPost_Handler,
		},
		{
			MethodName: "GetLikeAccountsOfPost",
			Handler:    _GoFeedService_GetLikeAccountsOfPost_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _GoFeedService_DeleteLike_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _GoFeedService_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentCountOfPost",
			Handler:    _GoFeedService_GetCommentCountOfPost_Handler,
		},
		{
			MethodName: "GetCommentsOfPost",
			Handler:    _GoFeedService_GetCommentsOfPost_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _GoFeedService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _GoFeedService_DeleteComment_Handler,
		},
		{
			MethodName: "CreateFollow",
			Handler:    _GoFeedService_CreateFollow_Handler,
		},
		{
			MethodName: "GetFollowerCountOfAccount",
			Handler:    _GoFeedService_GetFollowerCountOfAccount_Handler,
		},
		{
			MethodName: "GetFollowersOfAccount",
			Handler:    _GoFeedService_GetFollowersOfAccount_Handler,
		},
		{
			MethodName: "GetFollowingCountOfAccount",
			Handler:    _GoFeedService_GetFollowingCountOfAccount_Handler,
		},
		{
			MethodName: "GetFollowingsOfAccount",
			Handler:    _GoFeedService_GetFollowingsOfAccount_Handler,
		},
		{
			MethodName: "DeleteFollow",
			Handler:    _GoFeedService_DeleteFollow_Handler,
		},
		{
			MethodName: "GetNewFeeds",
			Handler:    _GoFeedService_GetNewFeeds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/go_feed/go_feed.proto",
}
